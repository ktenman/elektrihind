name: Java CI with Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ktenman/elektrihind
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    container: maven:3.9-eclipse-temurin-21-alpine
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1
      - uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/ee/tenman
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-
      - run: mvn -T 1C --quiet -Dparallel=methods -DthreadCount=2 --batch-mode test

  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1
      - uses: docker/setup-buildx-action@v3.0.0
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }},${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          cache-to: type=inline
  #      - name: Scan the Docker image
  #        uses: anchore/scan-action@v3.3.6
  #        with:
  #          image: "${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
  #          fail-build: false  # or false, depending on how you want to handle scan failures


  deploy:
    runs-on: ubuntu-latest
    needs: [ test, build_and_push ]
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH key of tenman.ee to known hosts
        run: echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "TELEGRAM_ELEKTRITEEMU_TOKEN=${{ secrets.TELEGRAM_ELEKTRITEEMU_TOKEN }}" > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" >> .env
          echo "TWO_CAPTCHA_API_KEY=${{ secrets.TWO_CAPTCHA_API_KEY }}" >> .env
          echo "DIGITAL_OCEAN_API_TOKEN=${{ secrets.DIGITAL_OCEAN_API_TOKEN }}" >> .env
          echo "SCRAPENINJA_API_KEY=${{ secrets.SCRAPENINJA_API_KEY }}" >> .env
          echo "VISION_BASE64_ENCODED_KEY=${{ secrets.VISION_BASE64_ENCODED_KEY }}" >> .env

      - name: Copy .env and docker-compose.yml files to server
        run: |
          scp .env docker-compose.yml githubuser@tenman.ee:~/  # Copying to the home directory of githubuser
      - name: Deploy with Docker Compose
        run: |
          ssh githubuser@tenman.ee "\
            docker pull '$DOCKER_IMAGE_NAME:latest' || true && \
            docker rm elektrihind-elektrihind-app-1 -f || true && \
            docker-compose down || true && \
            docker-compose up -d && \
            echo 'Pruning unused Docker images...' && \
            docker image prune -af"

      - name: Cleanup on server
        run: ssh githubuser@tenman.ee "rm ~/docker-compose.yml ~/.env"

      - name: Cleanup on runner
        run: rm .env
