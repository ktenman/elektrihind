name: Java CI with Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ktenman/elektrihind
  #  DOCKER_IMAGE_TAG: ${{ github.sha }}
  DOCKER_IMAGE_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    container: maven:3.9-eclipse-temurin-21-alpine
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-
      - run: mvn -T 1C --batch-mode test

  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Create and use a new builder
        run: |
          docker buildx create --use --name mybuilder
          docker buildx use mybuilder
          docker buildx inspect --bootstrap
      - name: Build and push
        run: |
          docker buildx build --push --tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,mode=max,dest=/tmp/.buildx-cache \
          .
  deploy:
    runs-on: ubuntu-latest
    needs: [ test, build_and_push ]
    steps:
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - run: |
          ssh githubuser@tenman.ee "\
            docker pull '$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG' || true && \
            docker stop elektrihind-app-container || true && \
            docker rm elektrihind-app-container || true && \
            docker run -d -p 8080:8080 --restart always --name elektrihind-app-container -e TELEGRAM_ELEKTRITEEMU_TOKEN='${{ secrets.TELEGRAM_ELEKTRITEEMU_TOKEN }}' -e TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}' -e OMDB_API_KEY='${{ secrets.OMDB_API_KEY }}' '$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG' && \
            echo 'Pruning unused Docker images...' && \
            docker image prune -af"
