name: Java CI with Docker

on:
  push:
  pull_request:
  workflow_dispatch:  # Added manual trigger
  repository_dispatch:
    types: [ trigger-deploy ]

env:
  DOCKER_IMAGE_NAME: ktenman/elektrihind
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: ðŸ§ª Test
    if: github.event_name != 'repository_dispatch'
    runs-on: ubuntu-latest
    container: maven:3.9-eclipse-temurin-21-alpine
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1
      - uses: actions/cache@v4.3.0
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/ee/tenman
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-
      - run: mvn -T 1C --quiet -Dparallel=methods -DthreadCount=2 --batch-mode test

  build_and_push:
    name: ðŸ”¨ Build and push
    if: github.ref == 'refs/heads/main' && github.event_name != 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1
      - uses: docker/setup-buildx-action@v3.11.1
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          cache-to: type=inline

  deploy_on_push:
    name: ðŸš€ Deploy on push
    if: github.ref == 'refs/heads/main' && github.event_name != 'repository_dispatch'
    runs-on: ubuntu-latest
    needs: [ test, build_and_push ]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH key of tenman.ee to known hosts
        run: echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "TELEGRAM_ELEKTRITEEMU_TOKEN=${{ secrets.TELEGRAM_ELEKTRITEEMU_TOKEN }}" > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" >> .env
          echo "TWO_CAPTCHA_API_KEY=${{ secrets.TWO_CAPTCHA_API_KEY }}" >> .env
          echo "DIGITAL_OCEAN_API_TOKEN=${{ secrets.DIGITAL_OCEAN_API_TOKEN }}" >> .env
          echo "SCRAPENINJA_API_KEY=${{ secrets.SCRAPENINJA_API_KEY }}" >> .env
          echo "VISION_BASE64_ENCODED_KEY=${{ secrets.VISION_BASE64_ENCODED_KEY }}" >> .env
          echo "OPENAI_API_TOKEN=${{ secrets.OPENAI_API_TOKEN }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "APOLLO_KINO_USERNAME=${{ secrets.APOLLO_KINO_USERNAME }}" >> .env
          echo "APOLLO_KINO_PASSWORD=${{ secrets.APOLLO_KINO_PASSWORD }}" >> .env
          echo "APOLLO_KINO_USERNAME_PASSWORD_PAIRS=${{ secrets.APOLLO_KINO_USERNAME_PASSWORD_PAIRS }}" >> .env

      - name: Copy .env and docker-compose.yml files to server
        run: |
          scp .env docker-compose.yml githubuser@tenman.ee:~/
      - name: Deploy with Docker Compose
        run: |
          ssh githubuser@tenman.ee "\
            docker pull '$DOCKER_IMAGE_NAME:latest' || true && \
            docker pull ktenman/captcha-solver:latest || true && \
            docker pull ktenman/automaks:latest || true && \
            docker-compose pull && \
            docker-compose up -d --build && \
            echo 'Pruning unused Docker images...' && \
            docker image prune -af"

  deploy_on_dispatch:
    name: ðŸš€ Deploy on dispatch
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH key of tenman.ee to known hosts
        run: echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "TELEGRAM_ELEKTRITEEMU_TOKEN=${{ secrets.TELEGRAM_ELEKTRITEEMU_TOKEN }}" > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" >> .env
          echo "TWO_CAPTCHA_API_KEY=${{ secrets.TWO_CAPTCHA_API_KEY }}" >> .env
          echo "DIGITAL_OCEAN_API_TOKEN=${{ secrets.DIGITAL_OCEAN_API_TOKEN }}" >> .env
          echo "SCRAPENINJA_API_KEY=${{ secrets.SCRAPENINJA_API_KEY }}" >> .env
          echo "VISION_BASE64_ENCODED_KEY=${{ secrets.VISION_BASE64_ENCODED_KEY }}" >> .env
          echo "OPENAI_API_TOKEN=${{ secrets.OPENAI_API_TOKEN }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "APOLLO_KINO_USERNAME=${{ secrets.APOLLO_KINO_USERNAME }}" >> .env
          echo "APOLLO_KINO_PASSWORD=${{ secrets.APOLLO_KINO_PASSWORD }}" >> .env
          echo "APOLLO_KINO_USERNAME_PASSWORD_PAIRS=${{ secrets.APOLLO_KINO_USERNAME_PASSWORD_PAIRS }}" >> .env

      - name: Copy .env and docker-compose.yml files to server
        run: |
          scp .env docker-compose.yml githubuser@tenman.ee:~/
      - name: Deploy with Docker Compose
        run: |
          ssh githubuser@tenman.ee "\
            docker pull '$DOCKER_IMAGE_NAME:latest' || true && \
            docker pull ktenman/captcha-solver:latest || true && \
            docker pull ktenman/automaks:latest || true && \
            docker-compose pull && \
            docker-compose up -d --build && \
            echo 'Pruning unused Docker images...' && \
            docker image prune -af"

  auto-merge-dependabot:
    name: ðŸ¤– Auto merge dependabot PR
    timeout-minutes: 15
    needs: [ test ]
    if: ${{ github.actor == 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: ðŸ¤– Merge PR from dependabot
        uses: fastify/github-action-merge-dependabot@v3.11.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: minor
          merge-method: rebase