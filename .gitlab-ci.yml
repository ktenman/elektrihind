image: docker:24.0.7

services:
  - name: docker:24.0.7-dind
    alias: docker

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE/maven-jdk-21:latest
  # DOCKER_HOST is not needed if using the default unix socket
  DOCKER_TLS_CERTDIR: ""  # Disabling TLS for simplicity, be aware of security implications in a production environment

stages:
  - diagnostics
  - build_image
  - build
  - test
  - deploy

diagnostics:
  stage: diagnostics
  script:
    - echo "Checking Docker version..."
    - docker --version || true
    - echo "Checking which Docker..."
    - which docker || true
    - echo "Checking PATH..."
    - echo $PATH
    - echo "Checking user permissions..."
    - id
    - echo "Checking if Docker service is up..."
    - ps aux | grep docker || true

build_image:
  stage: build_image
  before_script:
    - echo "Waiting for Docker to start..."
    - sleep 10
    - echo "Logging into GitLab Registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Building the Docker image..."
    - docker build --pull -t "$IMAGE_TAG" .
    - echo "Pushing the image to the registry..."
    - docker push "$IMAGE_TAG"

cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - .m2/repository

build:
  stage: build
  image: maven:3.9.5-eclipse-temurin-21-alpine
  script:
    - echo "Compiling the project..."
    - mvn compile
    - echo "Listing contents of the Maven repository to ensure it's populated..."
    - ls -la ~/.m2/repository/ || true

test:
  stage: test
  image: maven:3.9.5-eclipse-temurin-21-alpine
  script:
    - echo "Running tests..."
    - mvn test

deploy:
  stage: deploy
  image: docker:24.0.7  # Use a stable version of the Docker image
  before_script:
    - docker info # This will now show info about the host's Docker daemon
  script:
    - echo "Deploying the application..."
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker pull "$IMAGE_TAG" || true  # This will pull using the host's Docker daemon
    - docker stop elektrihind-app-container || true
    - docker rm elektrihind-app-container || true
    - docker run -d -p 8080:8080 --restart always --name elektrihind-app-container "$IMAGE_TAG"
  only:
    - main
  tags:
    - production




